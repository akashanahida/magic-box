name: Build Sing-Box Cores

on:
  workflow_dispatch:
  # push:

env:
  CHECKOUT_REPO: reF1nd/sing-box
  CHECKOUT_REF: reF1nd-main

jobs:
  go:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.go.outputs.version }}
    steps:
      - name: get latest go version
        id: go
        run: |
          echo version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/update-versions-manifest-file/versions-manifest.json \
            | grep -oE '"version": "[0-9]{1}\.[0-9]{1,}(\.[0-9]{1,})?"' \
            | head -1 \
            | cut -d':' -f2 \
            | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT

  sing-box:
    runs-on: ubuntu-latest
    needs: go
    outputs:
      version: ${{ steps.sing-box.outputs.version }}
    steps:
      - name: Checkout ${{ env.CHECKOUT_REPO }} @ ${{ env.CHECKOUT_REF }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_REPO }}
          ref: ${{ env.CHECKOUT_REF }}
          fetch-depth: 0

      - name: setup go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: ${{ needs.go.outputs.version }}

      - name: get sing-box version
        id: sing-box
        run: |
          git remote add sekai https://github.com/SagerNet/sing-box.git
          git fetch --tags sekai
          version=$(CGO_ENABLED=0 go run ./cmd/internal/read_tag)
          echo version=$version >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs:
      - go
      - sing-box
    strategy:
      matrix:
        jobs:
          # android
          - { goos: android,  goarch: arm64, goarm: ,      ndk: aarch64-linux-android35, output: arm64-v8a }

          # linux
          - { goos: linux,    goarch: arm64, goarm: ,      output: arm64 }
          - { goos: linux,    goarch: amd64, goamd64: v1,  goarm: , output: amd64 }
          - { goos: linux,    goarch: amd64, goamd64: v3,  goarm: , output: amd64v3 }
          - { goos: linux,    goarch: arm,   goarm: 7,     output: armv7 }   # ← 新增 linux/armv7

          # windows
          - { goos: windows,  goarch: amd64, goamd64: v1,  goarm: , output: amd64 }
          - { goos: windows,  goarch: amd64, goamd64: v3,  goarm: , output: amd64v3 }

    env:
      GOOS: ${{ matrix.jobs.goos }}
      GOARCH: ${{ matrix.jobs.goarch }}
      GOARM: ${{ matrix.jobs.goarm }}
      GOAMD64: ${{ matrix.jobs.goamd64 }}
      GOMIPS: ${{ matrix.jobs.gomips }}
      CGO_ENABLED: ${{ matrix.jobs.goos == 'android' && 1 || 0 }}
      VERSION: ${{ needs.sing-box.outputs.version }}
      SUFFIX: ${{ matrix.jobs.goos == 'windows' && '.exe' || '' }}

    steps:
      - name: Checkout ${{ env.CHECKOUT_REPO }} @ ${{ env.CHECKOUT_REF }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_REPO }}
          ref: ${{ env.CHECKOUT_REF }}
          fetch-depth: 0

      - name: setup go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: ${{ needs.go.outputs.version }}

      - name: Setup NDK
        if: ${{ matrix.jobs.goos == 'android' }}
        uses: nttld/setup-ndk@v1.5.0
        id: setup-ndk
        with:
          ndk-version: r28b

      - name: Setup CC ENV
        if: ${{ matrix.jobs.goos == 'android' }}
        run: |
          echo "CC=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.jobs.ndk }}-clang" \
            >> $GITHUB_ENV

      - name: build sing-box
        env:
          TAGS: with_quic,with_dhcp,with_wireguard,with_tailscale,with_utls,with_acme,with_clash_api,with_gvisor
        run: |
          go build \
            -o sing-box${{ env.SUFFIX }} \
            -v -trimpath \
            -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION}' -s -w -buildid=" \
            -tags "${TAGS}" ./cmd/sing-box

      - name: upload core
        uses: actions/upload-artifact@v4.3.6
        with:
          name: sing-box-${{ env.VERSION }}-${{ env.GOOS }}-${{ matrix.jobs.output }}
          path: |
            sing-box${{ env.SUFFIX }}
          compression-level: 9
